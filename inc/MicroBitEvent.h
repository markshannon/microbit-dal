/*
The MIT License (MIT)

Copyright (c) 2016 British Broadcasting Corporation.
This software is provided by Lancaster University by arrangement with the BBC.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef MICROBIT_EVENT_H
#define MICROBIT_EVENT_H

#include "mbed.h"

extern "C" {

/** This needs to be implemented by the runtime using this library */

extern void microbit_event(
    uint16_t source,         // ID of the MicroBit Component that generated the event e.g. MICROBIT_ID_BUTTON_A.
    uint16_t value);         // Component specific code indicating the cause of the event.

}

/**
  * Class definition for a MicrobitEvent
  * It represents a common event that is generated by the various components on the MB.
  */
class MicroBitEvent
{
    public:

    /**
      * Constructor. 
      * @param src ID of the MicroBit Component that generated the event e.g. MICROBIT_ID_BUTTON_A.
      * @param value Component specific code indicating the cause of the event.
      * @param mode optional definition of how the event should be processed after construction (if at all):
      *
      * CREATE_ONLY: MicroBitEvent is initialised, and no further processing takes place.
      * CREATE_AND_QUEUE: MicroBitEvent is initialised, and queued on the MicroBitMessageBus.
      * CREATE_AND_FIRE: MicroBitEvent is initialised, and its event handlers are immediately fired (not suitable for use in interrupts!).
      * 
      * Example: Create and launch an event using the default configuration
      * @code 
      * MicrobitEvent evt(id,MICROBIT_BUTTON_EVT_CLICK); 
      * @endcode
      *
      * Example: Create and launch an event and process all registered event handlers immediately.
      * @code 
      * MicrobitEvent evt(id,MICROBIT_BUTTON_EVT_CLICK,CREATE_AND_FIRE); 
      * @endcode
      */
   
    inline MicroBitEvent(uint16_t source, uint16_t value) {
        microbit_event(source, value);
    }

};

#endif

